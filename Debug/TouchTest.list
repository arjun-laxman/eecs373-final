
TouchTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b4  080037b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b4  080037b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b4  080037b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080037c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080037c8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a295  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abe  00000000  00000000  0002a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000795  00000000  00000000  0002c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283d7  00000000  00000000  0002cf6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c74b  00000000  00000000  00055344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5f6f  00000000  00000000  00061a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027c4  00000000  00000000  00157a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0015a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800375c 	.word	0x0800375c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800375c 	.word	0x0800375c

080001fc <main>:
  * @retval int
  */


int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fcc8 	bl	8000b96 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f821 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f8a3 	bl	8000354 <MX_GPIO_Init>
  MX_I2C1_Init();
 800020e:	f000 f863 	bl	80002d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  for (uint8_t addr = 0x5A; addr < 0x5B; addr++) {
 8000212:	235a      	movs	r3, #90	; 0x5a
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	e008      	b.n	800022a <main+0x2e>
  	  I2C_HandleTypeDef *sdf = &hi2c1;
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x4c>)
 800021a:	60bb      	str	r3, [r7, #8]
  	  if (mpr121_init(addr) != 0) {
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fae3 	bl	80007ea <mpr121_init>
  for (uint8_t addr = 0x5A; addr < 0x5B; addr++) {
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	3301      	adds	r3, #1
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b5a      	cmp	r3, #90	; 0x5a
 800022e:	d9f3      	bls.n	8000218 <main+0x1c>
  		  // TBD: ERROR
  	  }
  }
  uint8_t ecr;
  mpr121_read(0x5A, 0x5E, &ecr, 1);
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	2301      	movs	r3, #1
 8000234:	215e      	movs	r1, #94	; 0x5e
 8000236:	205a      	movs	r0, #90	; 0x5a
 8000238:	f000 fb58 	bl	80008ec <mpr121_read>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  uint16_t touch_status = mpr121_read_touch_status(0x5A);
 800023c:	205a      	movs	r0, #90	; 0x5a
 800023e:	f000 fb9f 	bl	8000980 <mpr121_read_touch_status>
 8000242:	4603      	mov	r3, r0
 8000244:	81bb      	strh	r3, [r7, #12]
  {
 8000246:	e7f9      	b.n	800023c <main+0x40>
 8000248:	20000028 	.word	0x20000028

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b096      	sub	sp, #88	; 0x58
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0314 	add.w	r3, r7, #20
 8000256:	2244      	movs	r2, #68	; 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fa52 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800026e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000272:	f001 fddb 	bl	8001e2c <HAL_PWREx_ControlVoltageScaling>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800027c:	f000 fab0 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000280:	2310      	movs	r3, #16
 8000282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800028c:	2360      	movs	r3, #96	; 0x60
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000290:	2300      	movs	r3, #0
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	4618      	mov	r0, r3
 800029a:	f001 fe7b 	bl	8001f94 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002a4:	f000 fa9c 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 fa81 	bl	80027c8 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002cc:	f000 fa88 	bl	80007e0 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3758      	adds	r7, #88	; 0x58
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_I2C1_Init+0x74>)
 80002e4:	f640 6214 	movw	r2, #3604	; 0xe14
 80002e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <MX_I2C1_Init+0x74>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <MX_I2C1_Init+0x74>)
 8000316:	f000 ff4f 	bl	80011b8 <HAL_I2C_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000320:	f000 fa5e 	bl	80007e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4809      	ldr	r0, [pc, #36]	; (800034c <MX_I2C1_Init+0x74>)
 8000328:	f001 fcc8 	bl	8001cbc <HAL_I2CEx_ConfigAnalogFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000332:	f000 fa55 	bl	80007e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000336:	2100      	movs	r1, #0
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_I2C1_Init+0x74>)
 800033a:	f001 fd0a 	bl	8001d52 <HAL_I2CEx_ConfigDigitalFilter>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000344:	f000 fa4c 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000028 	.word	0x20000028
 8000350:	40005400 	.word	0x40005400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08e      	sub	sp, #56	; 0x38
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800036a:	4bb2      	ldr	r3, [pc, #712]	; (8000634 <MX_GPIO_Init+0x2e0>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	4ab1      	ldr	r2, [pc, #708]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000370:	f043 0310 	orr.w	r3, r3, #16
 8000374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000376:	4baf      	ldr	r3, [pc, #700]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	f003 0310 	and.w	r3, r3, #16
 800037e:	623b      	str	r3, [r7, #32]
 8000380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4bac      	ldr	r3, [pc, #688]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	4aab      	ldr	r2, [pc, #684]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038e:	4ba9      	ldr	r3, [pc, #676]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	f003 0304 	and.w	r3, r3, #4
 8000396:	61fb      	str	r3, [r7, #28]
 8000398:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4ba6      	ldr	r3, [pc, #664]	; (8000634 <MX_GPIO_Init+0x2e0>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4aa5      	ldr	r2, [pc, #660]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a6:	4ba3      	ldr	r3, [pc, #652]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	f003 0320 	and.w	r3, r3, #32
 80003ae:	61bb      	str	r3, [r7, #24]
 80003b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b2:	4ba0      	ldr	r3, [pc, #640]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a9f      	ldr	r2, [pc, #636]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003be:	4b9d      	ldr	r3, [pc, #628]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b9a      	ldr	r3, [pc, #616]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	4a99      	ldr	r2, [pc, #612]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d6:	4b97      	ldr	r3, [pc, #604]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	613b      	str	r3, [r7, #16]
 80003e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b94      	ldr	r3, [pc, #592]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	4a93      	ldr	r2, [pc, #588]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003e8:	f043 0302 	orr.w	r3, r3, #2
 80003ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ee:	4b91      	ldr	r3, [pc, #580]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	f003 0302 	and.w	r3, r3, #2
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fa:	4b8e      	ldr	r3, [pc, #568]	; (8000634 <MX_GPIO_Init+0x2e0>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	4a8d      	ldr	r2, [pc, #564]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000400:	f043 0308 	orr.w	r3, r3, #8
 8000404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000406:	4b8b      	ldr	r3, [pc, #556]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	f003 0308 	and.w	r3, r3, #8
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000412:	4b88      	ldr	r3, [pc, #544]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	4a87      	ldr	r2, [pc, #540]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041e:	4b85      	ldr	r3, [pc, #532]	; (8000634 <MX_GPIO_Init+0x2e0>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800042a:	f001 fda3 	bl	8001f74 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800042e:	230c      	movs	r3, #12
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000432:	2302      	movs	r3, #2
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800043e:	230d      	movs	r3, #13
 8000440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000446:	4619      	mov	r1, r3
 8000448:	487b      	ldr	r0, [pc, #492]	; (8000638 <MX_GPIO_Init+0x2e4>)
 800044a:	f000 fd23 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800044e:	2307      	movs	r3, #7
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000452:	2312      	movs	r3, #18
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800045a:	2303      	movs	r3, #3
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800045e:	2304      	movs	r3, #4
 8000460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000466:	4619      	mov	r1, r3
 8000468:	4874      	ldr	r0, [pc, #464]	; (800063c <MX_GPIO_Init+0x2e8>)
 800046a:	f000 fd13 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000472:	2302      	movs	r3, #2
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800047e:	230d      	movs	r3, #13
 8000480:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000486:	4619      	mov	r1, r3
 8000488:	486c      	ldr	r0, [pc, #432]	; (800063c <MX_GPIO_Init+0x2e8>)
 800048a:	f000 fd03 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800048e:	233f      	movs	r3, #63	; 0x3f
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000492:	230b      	movs	r3, #11
 8000494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049e:	4619      	mov	r1, r3
 80004a0:	4867      	ldr	r0, [pc, #412]	; (8000640 <MX_GPIO_Init+0x2ec>)
 80004a2:	f000 fcf7 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a6:	2301      	movs	r3, #1
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004aa:	2302      	movs	r3, #2
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004b6:	2301      	movs	r3, #1
 80004b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f000 fce6 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80004c8:	230a      	movs	r3, #10
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004cc:	230b      	movs	r3, #11
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f000 fcd9 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004e2:	23f0      	movs	r3, #240	; 0xf0
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004f2:	2305      	movs	r3, #5
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fa:	4619      	mov	r1, r3
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fcc8 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000504:	2301      	movs	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000514:	2302      	movs	r3, #2
 8000516:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051c:	4619      	mov	r1, r3
 800051e:	4849      	ldr	r0, [pc, #292]	; (8000644 <MX_GPIO_Init+0x2f0>)
 8000520:	f000 fcb8 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000524:	2302      	movs	r3, #2
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000528:	230b      	movs	r3, #11
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000534:	4619      	mov	r1, r3
 8000536:	4843      	ldr	r0, [pc, #268]	; (8000644 <MX_GPIO_Init+0x2f0>)
 8000538:	f000 fcac 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800053c:	2344      	movs	r3, #68	; 0x44
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000540:	2303      	movs	r3, #3
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054c:	4619      	mov	r1, r3
 800054e:	483d      	ldr	r0, [pc, #244]	; (8000644 <MX_GPIO_Init+0x2f0>)
 8000550:	f000 fca0 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000554:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000566:	2301      	movs	r3, #1
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800056a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056e:	4619      	mov	r1, r3
 8000570:	4831      	ldr	r0, [pc, #196]	; (8000638 <MX_GPIO_Init+0x2e4>)
 8000572:	f000 fc8f 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000576:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057c:	2302      	movs	r3, #2
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000588:	2303      	movs	r3, #3
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800058c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000590:	4619      	mov	r1, r3
 8000592:	4829      	ldr	r0, [pc, #164]	; (8000638 <MX_GPIO_Init+0x2e4>)
 8000594:	f000 fc7e 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005aa:	2301      	movs	r3, #1
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	4823      	ldr	r0, [pc, #140]	; (8000644 <MX_GPIO_Init+0x2f0>)
 80005b6:	f000 fc6d 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005ba:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80005cc:	230d      	movs	r3, #13
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	4619      	mov	r1, r3
 80005d6:	481b      	ldr	r0, [pc, #108]	; (8000644 <MX_GPIO_Init+0x2f0>)
 80005d8:	f000 fc5c 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80005ee:	230e      	movs	r3, #14
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	4619      	mov	r1, r3
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_GPIO_Init+0x2f0>)
 80005fa:	f000 fc4b 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000610:	2307      	movs	r3, #7
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000618:	4619      	mov	r1, r3
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <MX_GPIO_Init+0x2f4>)
 800061c:	f000 fc3a 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000620:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	e00c      	b.n	800064c <MX_GPIO_Init+0x2f8>
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	48001000 	.word	0x48001000
 800063c:	48001400 	.word	0x48001400
 8000640:	48000800 	.word	0x48000800
 8000644:	48000400 	.word	0x48000400
 8000648:	48000c00 	.word	0x48000c00
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	4619      	mov	r1, r3
 8000658:	485c      	ldr	r0, [pc, #368]	; (80007cc <MX_GPIO_Init+0x478>)
 800065a:	f000 fc1b 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800065e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000670:	2308      	movs	r3, #8
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4855      	ldr	r0, [pc, #340]	; (80007d0 <MX_GPIO_Init+0x47c>)
 800067c:	f000 fc0a 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000690:	230d      	movs	r3, #13
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	484e      	ldr	r0, [pc, #312]	; (80007d4 <MX_GPIO_Init+0x480>)
 800069c:	f000 fbfa 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	4619      	mov	r1, r3
 80006ba:	4846      	ldr	r0, [pc, #280]	; (80007d4 <MX_GPIO_Init+0x480>)
 80006bc:	f000 fbea 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006d2:	230c      	movs	r3, #12
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	4619      	mov	r1, r3
 80006dc:	483d      	ldr	r0, [pc, #244]	; (80007d4 <MX_GPIO_Init+0x480>)
 80006de:	f000 fbd9 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80006e2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006f4:	230a      	movs	r3, #10
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	4619      	mov	r1, r3
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000702:	f000 fbc7 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f000 fbb9 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000722:	2301      	movs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000732:	2309      	movs	r3, #9
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	4619      	mov	r1, r3
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <MX_GPIO_Init+0x478>)
 800073e:	f000 fba9 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000742:	2304      	movs	r3, #4
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000752:	230c      	movs	r3, #12
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	4619      	mov	r1, r3
 800075c:	481b      	ldr	r0, [pc, #108]	; (80007cc <MX_GPIO_Init+0x478>)
 800075e:	f000 fb99 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000762:	2378      	movs	r3, #120	; 0x78
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000772:	2307      	movs	r3, #7
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <MX_GPIO_Init+0x478>)
 800077e:	f000 fb89 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000782:	2338      	movs	r3, #56	; 0x38
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000792:	2306      	movs	r3, #6
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x484>)
 800079e:	f000 fb79 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_GPIO_Init+0x488>)
 80007be:	f000 fb69 	bl	8000e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	3738      	adds	r7, #56	; 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	48000c00 	.word	0x48000c00
 80007d0:	48001800 	.word	0x48001800
 80007d4:	48000800 	.word	0x48000800
 80007d8:	48000400 	.word	0x48000400
 80007dc:	48001000 	.word	0x48001000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>

080007ea <mpr121_init>:
#define RELEASE_THRESHOLD 0x06

extern I2C_HandleTypeDef hi2c1;

int mpr121_init(uint8_t addr)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	// resetting ECR
	data = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
	if (mpr121_write(addr, ECR, &data, 1) != 0) {
 80007f8:	f107 020f 	add.w	r2, r7, #15
 80007fc:	79f8      	ldrb	r0, [r7, #7]
 80007fe:	2301      	movs	r3, #1
 8000800:	215e      	movs	r1, #94	; 0x5e
 8000802:	f000 f899 	bl	8000938 <mpr121_write>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <mpr121_init+0x28>
		return -1;
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	e03d      	b.n	800088e <mpr121_init+0xa4>
	}

	// soft resetting
	data = RST_VAL;
 8000812:	2363      	movs	r3, #99	; 0x63
 8000814:	73fb      	strb	r3, [r7, #15]
	if (mpr121_write(addr, SOFT_RST, &data, 1)) {
 8000816:	f107 020f 	add.w	r2, r7, #15
 800081a:	79f8      	ldrb	r0, [r7, #7]
 800081c:	2301      	movs	r3, #1
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	f000 f88a 	bl	8000938 <mpr121_write>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <mpr121_init+0x46>
		return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e02e      	b.n	800088e <mpr121_init+0xa4>
	}
	HAL_Delay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f000 fa25 	bl	8000c80 <HAL_Delay>

	// checking whether reset actually worked by reading config reg 2's default value
	if (mpr121_read(addr, 0x5d, &data, 1) || data != 0x24) {
 8000836:	f107 020f 	add.w	r2, r7, #15
 800083a:	79f8      	ldrb	r0, [r7, #7]
 800083c:	2301      	movs	r3, #1
 800083e:	215d      	movs	r1, #93	; 0x5d
 8000840:	f000 f854 	bl	80008ec <mpr121_read>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d102      	bne.n	8000850 <mpr121_init+0x66>
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b24      	cmp	r3, #36	; 0x24
 800084e:	d002      	beq.n	8000856 <mpr121_init+0x6c>
		return -1;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	e01b      	b.n	800088e <mpr121_init+0xa4>
	}

	// set default touch and release thresholds
	if (mpr121_set_thresholds(addr, TOUCH_THRESHOLD, RELEASE_THRESHOLD)) {
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2206      	movs	r2, #6
 800085a:	210c      	movs	r1, #12
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f81a 	bl	8000896 <mpr121_set_thresholds>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <mpr121_init+0x84>
		return -1;
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	e00f      	b.n	800088e <mpr121_init+0xa4>
	}

	// Enabling all electrodes with baseline tracking upon initialisation
	data = ECR_ALL_ENABLE;
 800086e:	238c      	movs	r3, #140	; 0x8c
 8000870:	73fb      	strb	r3, [r7, #15]
	if (mpr121_write(addr, ECR, &data, 1)) {
 8000872:	f107 020f 	add.w	r2, r7, #15
 8000876:	79f8      	ldrb	r0, [r7, #7]
 8000878:	2301      	movs	r3, #1
 800087a:	215e      	movs	r1, #94	; 0x5e
 800087c:	f000 f85c 	bl	8000938 <mpr121_write>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <mpr121_init+0xa2>
		return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e000      	b.n	800088e <mpr121_init+0xa4>
	}

	return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <mpr121_set_thresholds>:

int mpr121_set_thresholds(uint8_t addr, uint8_t touch, uint8_t release)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b084      	sub	sp, #16
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	460b      	mov	r3, r1
 80008a2:	71bb      	strb	r3, [r7, #6]
 80008a4:	4613      	mov	r3, r2
 80008a6:	717b      	strb	r3, [r7, #5]
	uint8_t thresholds[] = {touch, release};
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	723b      	strb	r3, [r7, #8]
 80008ac:	797b      	ldrb	r3, [r7, #5]
 80008ae:	727b      	strb	r3, [r7, #9]
	for (int i = 0; i < NUM_ELECS; i += 2) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e012      	b.n	80008dc <mpr121_set_thresholds+0x46>
		if (mpr121_write(addr, 0x41 + i, thresholds, 2)) {
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3341      	adds	r3, #65	; 0x41
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	f107 0208 	add.w	r2, r7, #8
 80008c2:	79f8      	ldrb	r0, [r7, #7]
 80008c4:	2302      	movs	r3, #2
 80008c6:	f000 f837 	bl	8000938 <mpr121_write>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <mpr121_set_thresholds+0x40>
			return -1;
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	e006      	b.n	80008e4 <mpr121_set_thresholds+0x4e>
	for (int i = 0; i < NUM_ELECS; i += 2) {
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3302      	adds	r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b0b      	cmp	r3, #11
 80008e0:	dde9      	ble.n	80008b6 <mpr121_set_thresholds+0x20>
		}
	}
	return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <mpr121_read>:

int mpr121_read(uint8_t addr, uint8_t reg_addr, uint8_t *data, int size)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af04      	add	r7, sp, #16
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4603      	mov	r3, r0
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	460b      	mov	r3, r1
 80008fc:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Mem_Read(&hi2c1, (addr << 1) | 1, reg_addr, 1, data, size, HAL_MAX_DELAY);
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	b21b      	sxth	r3, r3
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	b21b      	sxth	r3, r3
 800090a:	b299      	uxth	r1, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b29a      	uxth	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	b29b      	uxth	r3, r3
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	9002      	str	r0, [sp, #8]
 800091a:	9301      	str	r3, [sp, #4]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2301      	movs	r3, #1
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <mpr121_read+0x48>)
 8000924:	f000 fdf8 	bl	8001518 <HAL_I2C_Mem_Read>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000028 	.word	0x20000028

08000938 <mpr121_write>:

int mpr121_write(uint8_t addr, uint8_t reg_addr, uint8_t *data, int size)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af04      	add	r7, sp, #16
 800093e:	60ba      	str	r2, [r7, #8]
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	460b      	mov	r3, r1
 8000948:	73bb      	strb	r3, [r7, #14]
	I2C_HandleTypeDef *sdf = &hi2c1;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <mpr121_write+0x44>)
 800094c:	617b      	str	r3, [r7, #20]
	return HAL_I2C_Mem_Write(&hi2c1, (addr << 1), reg_addr, 1, data, size, HAL_MAX_DELAY);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	b29b      	uxth	r3, r3
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	b299      	uxth	r1, r3
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	b29b      	uxth	r3, r3
 800095e:	f04f 30ff 	mov.w	r0, #4294967295
 8000962:	9002      	str	r0, [sp, #8]
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <mpr121_write+0x44>)
 800096e:	f000 fcbf 	bl	80012f0 <HAL_I2C_Mem_Write>
 8000972:	4603      	mov	r3, r0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000028 	.word	0x20000028

08000980 <mpr121_read_touch_status>:

uint16_t mpr121_read_touch_status(uint8_t addr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	uint8_t status[2] = {0};
 800098a:	2300      	movs	r3, #0
 800098c:	81bb      	strh	r3, [r7, #12]
	if (mpr121_read(addr, TOUCH_STATUS, status, 2)) {
 800098e:	f107 020c 	add.w	r2, r7, #12
 8000992:	79f8      	ldrb	r0, [r7, #7]
 8000994:	2302      	movs	r3, #2
 8000996:	2100      	movs	r1, #0
 8000998:	f7ff ffa8 	bl	80008ec <mpr121_read>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <mpr121_read_touch_status+0x28>
		return ~0;
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	e00a      	b.n	80009be <mpr121_read_touch_status+0x3e>
	}
	uint16_t ret = status[1];
 80009a8:	7b7b      	ldrb	r3, [r7, #13]
 80009aa:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	81fb      	strh	r3, [r7, #14]
	ret |= status[0];
 80009b2:	7b3b      	ldrb	r3, [r7, #12]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	81fb      	strh	r3, [r7, #14]
	return ret;
 80009bc:	89fb      	ldrh	r3, [r7, #14]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ae      	sub	sp, #184	; 0xb8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2294      	movs	r2, #148	; 0x94
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fe67 	bl	8003704 <memset>
  if(hi2c->Instance==I2C1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <HAL_I2C_MspInit+0xb0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d13b      	bne.n	8000ab8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a40:	2340      	movs	r3, #64	; 0x40
 8000a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f941 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff fec2 	bl	80007e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_I2C_MspInit+0xb4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <HAL_I2C_MspInit+0xb4>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_I2C_MspInit+0xb4>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <HAL_I2C_MspInit+0xb8>)
 8000a9c:	f000 f9fa 	bl	8000e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_I2C_MspInit+0xb4>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_I2C_MspInit+0xb4>)
 8000aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_I2C_MspInit+0xb4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	37b8      	adds	r7, #184	; 0xb8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f892 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff ffea 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fdcf 	bl	8003714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b76:	f7ff fb41 	bl	80001fc <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b88:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b90:	20000080 	.word	0x20000080

08000b94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_IRQHandler>

08000b96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f943 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f80e 	bl	8000bc8 <HAL_InitTick>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	e001      	b.n	8000bbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb8:	f7ff ff06 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d023      	beq.n	8000c24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_InitTick+0x70>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f941 	bl	8000e7a <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10f      	bne.n	8000c1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d809      	bhi.n	8000c18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 f919 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_InitTick+0x74>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e004      	b.n	8000c28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e001      	b.n	8000c28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	2000007c 	.word	0x2000007c

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2000007c 	.word	0x2000007c

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff47 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff5c 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb0 	bl	8000de8 <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e166      	b.n	8001172 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 8158 	beq.w	800116c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d005      	beq.n	8000ed4 <HAL_GPIO_Init+0x40>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0201 	and.w	r2, r3, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d017      	beq.n	8000f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d123      	bne.n	8000fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0203 	and.w	r2, r3, #3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80b2 	beq.w	800116c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001008:	4b61      	ldr	r3, [pc, #388]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100c:	4a60      	ldr	r2, [pc, #384]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6613      	str	r3, [r2, #96]	; 0x60
 8001014:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 8001016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001020:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800104a:	d02b      	beq.n	80010a4 <HAL_GPIO_Init+0x210>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d025      	beq.n	80010a0 <HAL_GPIO_Init+0x20c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a51      	ldr	r2, [pc, #324]	; (800119c <HAL_GPIO_Init+0x308>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01f      	beq.n	800109c <HAL_GPIO_Init+0x208>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d019      	beq.n	8001098 <HAL_GPIO_Init+0x204>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x310>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d013      	beq.n	8001094 <HAL_GPIO_Init+0x200>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_GPIO_Init+0x314>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d00d      	beq.n	8001090 <HAL_GPIO_Init+0x1fc>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <HAL_GPIO_Init+0x318>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x1f8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d101      	bne.n	8001088 <HAL_GPIO_Init+0x1f4>
 8001084:	2307      	movs	r3, #7
 8001086:	e00e      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 8001088:	2308      	movs	r3, #8
 800108a:	e00c      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 800108c:	2306      	movs	r3, #6
 800108e:	e00a      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 8001090:	2305      	movs	r3, #5
 8001092:	e008      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 8001094:	2304      	movs	r3, #4
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 8001098:	2303      	movs	r3, #3
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 800109c:	2302      	movs	r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_Init+0x212>
 80010a4:	2300      	movs	r3, #0
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	f002 0203 	and.w	r2, r2, #3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4093      	lsls	r3, r2
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b6:	4937      	ldr	r1, [pc, #220]	; (8001194 <HAL_GPIO_Init+0x300>)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_GPIO_Init+0x320>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e8:	4a32      	ldr	r2, [pc, #200]	; (80011b4 <HAL_GPIO_Init+0x320>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <HAL_GPIO_Init+0x320>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001112:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <HAL_GPIO_Init+0x320>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_GPIO_Init+0x320>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <HAL_GPIO_Init+0x320>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	f47f ae91 	bne.w	8000ea4 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	371c      	adds	r7, #28
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000
 8001198:	48000400 	.word	0x48000400
 800119c:	48000800 	.word	0x48000800
 80011a0:	48000c00 	.word	0x48000c00
 80011a4:	48001000 	.word	0x48001000
 80011a8:	48001400 	.word	0x48001400
 80011ac:	48001800 	.word	0x48001800
 80011b0:	48001c00 	.word	0x48001c00
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e08d      	b.n	80012e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d106      	bne.n	80011e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fc16 	bl	8000a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2224      	movs	r2, #36	; 0x24
 80011e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	e006      	b.n	8001240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800123e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d108      	bne.n	800125a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	e007      	b.n	800126a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001268:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69d9      	ldr	r1, [r3, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	817b      	strh	r3, [r7, #10]
 8001302:	460b      	mov	r3, r1
 8001304:	813b      	strh	r3, [r7, #8]
 8001306:	4613      	mov	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b20      	cmp	r3, #32
 8001314:	f040 80f9 	bne.w	800150a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <HAL_I2C_Mem_Write+0x34>
 800131e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0ed      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_I2C_Mem_Write+0x4e>
 800133a:	2302      	movs	r3, #2
 800133c:	e0e6      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001346:	f7ff fc8f 	bl	8000c68 <HAL_GetTick>
 800134a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2319      	movs	r3, #25
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fac3 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0d1      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2221      	movs	r2, #33	; 0x21
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a3a      	ldr	r2, [r7, #32]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001390:	88f8      	ldrh	r0, [r7, #6]
 8001392:	893a      	ldrh	r2, [r7, #8]
 8001394:	8979      	ldrh	r1, [r7, #10]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f9d3 	bl	800174c <I2C_RequestMemoryWrite>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0a9      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d90e      	bls.n	80013e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	8979      	ldrh	r1, [r7, #10]
 80013d0:	2300      	movs	r3, #0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fc3d 	bl	8001c58 <I2C_TransferConfig>
 80013de:	e00f      	b.n	8001400 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	8979      	ldrh	r1, [r7, #10]
 80013f2:	2300      	movs	r3, #0
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 fc2c 	bl	8001c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fabc 	bl	8001982 <I2C_WaitOnTXISFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e07b      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d034      	beq.n	80014b8 <HAL_I2C_Mem_Write+0x1c8>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001452:	2b00      	cmp	r3, #0
 8001454:	d130      	bne.n	80014b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 fa3f 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e04d      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d90e      	bls.n	8001498 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001484:	b2da      	uxtb	r2, r3
 8001486:	8979      	ldrh	r1, [r7, #10]
 8001488:	2300      	movs	r3, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fbe1 	bl	8001c58 <I2C_TransferConfig>
 8001496:	e00f      	b.n	80014b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	8979      	ldrh	r1, [r7, #10]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fbd0 	bl	8001c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d19e      	bne.n	8001400 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 faa2 	bl	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e01a      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2220      	movs	r2, #32
 80014dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_I2C_Mem_Write+0x224>)
 80014ea:	400b      	ands	r3, r1
 80014ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	fe00e800 	.word	0xfe00e800

08001518 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4603      	mov	r3, r0
 8001528:	817b      	strh	r3, [r7, #10]
 800152a:	460b      	mov	r3, r1
 800152c:	813b      	strh	r3, [r7, #8]
 800152e:	4613      	mov	r3, r2
 8001530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b20      	cmp	r3, #32
 800153c:	f040 80fd 	bne.w	800173a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <HAL_I2C_Mem_Read+0x34>
 8001546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0f1      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Mem_Read+0x4e>
 8001562:	2302      	movs	r3, #2
 8001564:	e0ea      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800156e:	f7ff fb7b 	bl	8000c68 <HAL_GetTick>
 8001572:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2319      	movs	r3, #25
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f9af 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0d5      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2222      	movs	r2, #34	; 0x22
 8001594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015b8:	88f8      	ldrh	r0, [r7, #6]
 80015ba:	893a      	ldrh	r2, [r7, #8]
 80015bc:	8979      	ldrh	r1, [r7, #10]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4603      	mov	r3, r0
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f913 	bl	80017f4 <I2C_RequestMemoryRead>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0ad      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d90e      	bls.n	8001608 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	8979      	ldrh	r1, [r7, #10]
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <HAL_I2C_Mem_Read+0x22c>)
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fb29 	bl	8001c58 <I2C_TransferConfig>
 8001606:	e00f      	b.n	8001628 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001616:	b2da      	uxtb	r2, r3
 8001618:	8979      	ldrh	r1, [r7, #10]
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <HAL_I2C_Mem_Read+0x22c>)
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fb18 	bl	8001c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	2200      	movs	r2, #0
 8001630:	2104      	movs	r1, #4
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f956 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07c      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d034      	beq.n	80016e8 <HAL_I2C_Mem_Read+0x1d0>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	d130      	bne.n	80016e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	2200      	movs	r2, #0
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f927 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e04d      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2bff      	cmp	r3, #255	; 0xff
 80016a8:	d90e      	bls.n	80016c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	22ff      	movs	r2, #255	; 0xff
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	8979      	ldrh	r1, [r7, #10]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 fac9 	bl	8001c58 <I2C_TransferConfig>
 80016c6:	e00f      	b.n	80016e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fab8 	bl	8001c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d19a      	bne.n	8001628 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f98a 	bl	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01a      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2220      	movs	r2, #32
 800170c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_I2C_Mem_Read+0x230>)
 800171a:	400b      	ands	r3, r1
 800171c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800173a:	2302      	movs	r3, #2
  }
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	80002400 	.word	0x80002400
 8001748:	fe00e800 	.word	0xfe00e800

0800174c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4603      	mov	r3, r0
 800175c:	817b      	strh	r3, [r7, #10]
 800175e:	460b      	mov	r3, r1
 8001760:	813b      	strh	r3, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	8979      	ldrh	r1, [r7, #10]
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <I2C_RequestMemoryWrite+0xa4>)
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fa6f 	bl	8001c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	69b9      	ldr	r1, [r7, #24]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f8ff 	bl	8001982 <I2C_WaitOnTXISFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e02c      	b.n	80017e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001794:	893b      	ldrh	r3, [r7, #8]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
 800179e:	e015      	b.n	80017cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017a0:	893b      	ldrh	r3, [r7, #8]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	69b9      	ldr	r1, [r7, #24]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f8e5 	bl	8001982 <I2C_WaitOnTXISFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e012      	b.n	80017e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017c2:	893b      	ldrh	r3, [r7, #8]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2200      	movs	r2, #0
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f884 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	80002000 	.word	0x80002000

080017f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4603      	mov	r3, r0
 8001804:	817b      	strh	r3, [r7, #10]
 8001806:	460b      	mov	r3, r1
 8001808:	813b      	strh	r3, [r7, #8]
 800180a:	4613      	mov	r3, r2
 800180c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	8979      	ldrh	r1, [r7, #10]
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <I2C_RequestMemoryRead+0xa4>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2300      	movs	r3, #0
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa1c 	bl	8001c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f8ac 	bl	8001982 <I2C_WaitOnTXISFlagUntilTimeout>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e02c      	b.n	800188e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800183a:	893b      	ldrh	r3, [r7, #8]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
 8001844:	e015      	b.n	8001872 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001846:	893b      	ldrh	r3, [r7, #8]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f892 	bl	8001982 <I2C_WaitOnTXISFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e012      	b.n	800188e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001868:	893b      	ldrh	r3, [r7, #8]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2200      	movs	r2, #0
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f831 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	80002000 	.word	0x80002000

0800189c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d103      	bne.n	80018ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d007      	beq.n	80018d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	619a      	str	r2, [r3, #24]
  }
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f4:	e031      	b.n	800195a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d02d      	beq.n	800195a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fe:	f7ff f9b3 	bl	8000c68 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d302      	bcc.n	8001914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d122      	bne.n	800195a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	4013      	ands	r3, r2
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	429a      	cmp	r2, r3
 8001930:	d113      	bne.n	800195a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f043 0220 	orr.w	r2, r3, #32
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4013      	ands	r3, r2
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	429a      	cmp	r2, r3
 8001976:	d0be      	beq.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800198e:	e033      	b.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f87f 	bl	8001a98 <I2C_IsErrorOccurred>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e031      	b.n	8001a08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019aa:	d025      	beq.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ac:	f7ff f95c 	bl	8000c68 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d302      	bcc.n	80019c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11a      	bne.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d013      	beq.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f043 0220 	orr.w	r2, r3, #32
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e007      	b.n	8001a08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d1c4      	bne.n	8001990 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a1c:	e02f      	b.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f838 	bl	8001a98 <I2C_IsErrorOccurred>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e02d      	b.n	8001a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a32:	f7ff f919 	bl	8000c68 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d302      	bcc.n	8001a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11a      	bne.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	d013      	beq.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e007      	b.n	8001a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d1c8      	bne.n	8001a1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d068      	beq.n	8001b96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2210      	movs	r2, #16
 8001aca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001acc:	e049      	b.n	8001b62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d045      	beq.n	8001b62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ad6:	f7ff f8c7 	bl	8000c68 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d302      	bcc.n	8001aec <I2C_IsErrorOccurred+0x54>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d13a      	bne.n	8001b62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001afe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b0e:	d121      	bne.n	8001b54 <I2C_IsErrorOccurred+0xbc>
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b16:	d01d      	beq.n	8001b54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d01a      	beq.n	8001b54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b2e:	f7ff f89b 	bl	8000c68 <HAL_GetTick>
 8001b32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b34:	e00e      	b.n	8001b54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b36:	f7ff f897 	bl	8000c68 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b19      	cmp	r3, #25
 8001b42:	d907      	bls.n	8001b54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f043 0320 	orr.w	r3, r3, #32
 8001b4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b52:	e006      	b.n	8001b62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	d1e9      	bne.n	8001b36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d003      	beq.n	8001b78 <I2C_IsErrorOccurred+0xe0>
 8001b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0aa      	beq.n	8001ace <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d103      	bne.n	8001b88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01c      	beq.n	8001c46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff fe45 	bl	800189c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <I2C_IsErrorOccurred+0x1bc>)
 8001c1e:	400b      	ands	r3, r1
 8001c20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	fe00e800 	.word	0xfe00e800

08001c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	817b      	strh	r3, [r7, #10]
 8001c66:	4613      	mov	r3, r2
 8001c68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	0d5b      	lsrs	r3, r3, #21
 8001c92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <I2C_TransferConfig+0x60>)
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	ea02 0103 	and.w	r1, r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	03ff63ff 	.word	0x03ff63ff

08001cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d138      	bne.n	8001d44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e032      	b.n	8001d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2224      	movs	r2, #36	; 0x24
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d139      	bne.n	8001ddc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e033      	b.n	8001dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2224      	movs	r2, #36	; 0x24
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001da4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfc:	d102      	bne.n	8001e04 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	e00b      	b.n	8001e1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e12:	d102      	bne.n	8001e1a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e18:	e000      	b.n	8001e1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e1a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40007000 	.word	0x40007000

08001e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d141      	bne.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e46:	d131      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4e:	4a46      	ldr	r2, [pc, #280]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e60:	4a41      	ldr	r2, [pc, #260]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e68:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2232      	movs	r2, #50	; 0x32
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a3f      	ldr	r2, [pc, #252]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7e:	e002      	b.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d102      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f2      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d158      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e057      	b.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	4a2d      	ldr	r2, [pc, #180]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ebc:	e04d      	b.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec4:	d141      	bne.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed2:	d131      	bne.n	8001f38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eda:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eec:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2232      	movs	r2, #50	; 0x32
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	0c9b      	lsrs	r3, r3, #18
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0a:	e002      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1e:	d102      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f2      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d112      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e011      	b.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f48:	e007      	b.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f58:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6053      	str	r3, [r2, #4]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000

08001f94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f000 bc08 	b.w	80027b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb2:	4b94      	ldr	r3, [pc, #592]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80e4 	beq.w	8002192 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4c>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	f040 808b 	bne.w	80020ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	f040 8087 	bne.w	80020ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe0:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x64>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e3df      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_RCC_OscConfig+0x7e>
 8002008:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	e005      	b.n	800201e <HAL_RCC_OscConfig+0x8a>
 8002012:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201e:	4293      	cmp	r3, r2
 8002020:	d223      	bcs.n	800206a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fd94 	bl	8002b54 <RCC_SetFlashLatencyFromMSIRange>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e3c0      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a72      	ldr	r2, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b70      	ldr	r3, [pc, #448]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	496d      	ldr	r1, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002054:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	4968      	ldr	r1, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e025      	b.n	80020b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206a:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4960      	ldr	r1, [pc, #384]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	495b      	ldr	r1, [pc, #364]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fd54 	bl	8002b54 <RCC_SetFlashLatencyFromMSIRange>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e380      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b6:	f000 fcc1 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4950      	ldr	r1, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_RCC_OscConfig+0x278>)
 80020d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020d6:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fd74 	bl	8000bc8 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d052      	beq.n	8002190 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	e364      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d032      	beq.n	800215c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002102:	f7fe fdb1 	bl	8000c68 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210a:	f7fe fdad 	bl	8000c68 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e34d      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a35      	ldr	r2, [pc, #212]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212e:	f043 0308 	orr.w	r3, r3, #8
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4930      	ldr	r1, [pc, #192]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	492b      	ldr	r1, [pc, #172]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
 800215a:	e01a      	b.n	8002192 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002168:	f7fe fd7e 	bl	8000c68 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002170:	f7fe fd7a 	bl	8000c68 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e31a      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1dc>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d073      	beq.n	8002286 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x21c>
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d10e      	bne.n	80021c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d063      	beq.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d15f      	bne.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e2f7      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x24c>
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e025      	b.n	800222c <HAL_RCC_OscConfig+0x298>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d114      	bne.n	8002214 <HAL_RCC_OscConfig+0x280>
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a02      	ldr	r2, [pc, #8]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0x298>
 8002204:	40021000 	.word	0x40021000
 8002208:	08003774 	.word	0x08003774
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004
 8002214:	4ba0      	ldr	r3, [pc, #640]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a9f      	ldr	r2, [pc, #636]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b9d      	ldr	r3, [pc, #628]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a9c      	ldr	r2, [pc, #624]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fd18 	bl	8000c68 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fd14 	bl	8000c68 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e2b4      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x2a8>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fd04 	bl	8000c68 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe fd00 	bl	8000c68 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e2a0      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x2d0>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d060      	beq.n	8002354 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x310>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d116      	bne.n	80022d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x328>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e27d      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	4973      	ldr	r1, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d0:	e040      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d023      	beq.n	8002322 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fcbf 	bl	8000c68 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fcbb 	bl	8000c68 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e25b      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	495f      	ldr	r1, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	e018      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fc9b 	bl	8000c68 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe fc97 	bl	8000c68 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e237      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03c      	beq.n	80023da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fc76 	bl	8000c68 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fc72 	bl	8000c68 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e212      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x3ec>
 80023a0:	e01b      	b.n	80023da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fc59 	bl	8000c68 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fc55 	bl	8000c68 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1f5      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a6 	beq.w	8002534 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	6593      	str	r3, [r2, #88]	; 0x58
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002410:	2301      	movs	r3, #1
 8002412:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d118      	bne.n	8002452 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242c:	f7fe fc1c 	bl	8000c68 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fc18 	bl	8000c68 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1b8      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x4d8>
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246a:	e029      	b.n	80024c0 <HAL_RCC_OscConfig+0x52c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d115      	bne.n	80024a0 <HAL_RCC_OscConfig+0x50c>
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x52c>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b0:	4b99      	ldr	r3, [pc, #612]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	4a98      	ldr	r2, [pc, #608]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fbce 	bl	8000c68 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fbca 	bl	8000c68 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e168      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ed      	beq.n	80024d0 <HAL_RCC_OscConfig+0x53c>
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fbb7 	bl	8000c68 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fbb3 	bl	8000c68 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e151      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002514:	4b80      	ldr	r3, [pc, #512]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ed      	bne.n	80024fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002548:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 800254a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254e:	4a72      	ldr	r2, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fb86 	bl	8000c68 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002560:	f7fe fb82 	bl	8000c68 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e122      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002572:	4b69      	ldr	r3, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCC_OscConfig+0x5cc>
 8002580:	e01b      	b.n	80025ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002582:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002588:	4a63      	ldr	r2, [pc, #396]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fb69 	bl	8000c68 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259a:	f7fe fb65 	bl	8000c68 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e105      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025ac:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80025ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80f9 	beq.w	80027b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f040 80cf 	bne.w	800276c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025ce:	4b52      	ldr	r3, [pc, #328]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	429a      	cmp	r2, r3
 80025e0:	d12c      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	3b01      	subs	r3, #1
 80025ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d123      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d11b      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d113      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d109      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d071      	beq.n	8002720 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d068      	beq.n	8002714 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002642:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0ac      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800266a:	f7fe fafd 	bl	8000c68 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe faf9 	bl	8000c68 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e099      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x788>)
 8002696:	4013      	ands	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026aa:	0212      	lsls	r2, r2, #8
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0552      	lsls	r2, r2, #21
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026be:	0852      	lsrs	r2, r2, #1
 80026c0:	3a01      	subs	r2, #1
 80026c2:	0652      	lsls	r2, r2, #25
 80026c4:	4311      	orrs	r1, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ca:	06d2      	lsls	r2, r2, #27
 80026cc:	430a      	orrs	r2, r1
 80026ce:	4912      	ldr	r1, [pc, #72]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 80026e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026ec:	f7fe fabc 	bl	8000c68 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe fab8 	bl	8000c68 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e058      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002712:	e050      	b.n	80027b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e04f      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
 8002718:	40021000 	.word	0x40021000
 800271c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d144      	bne.n	80027b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002742:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002744:	f7fe fa90 	bl	8000c68 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fa8c 	bl	8000c68 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e02c      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x7b8>
 800276a:	e024      	b.n	80027b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d01f      	beq.n	80027b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 8002778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fa73 	bl	8000c68 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe fa6f 	bl	8000c68 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4905      	ldr	r1, [pc, #20]	; (80027c0 <HAL_RCC_OscConfig+0x82c>)
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x830>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
 80027b0:	e001      	b.n	80027b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	feeefffc 	.word	0xfeeefffc

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e11d      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b90      	ldr	r3, [pc, #576]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d910      	bls.n	8002810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 020f 	bic.w	r2, r3, #15
 80027f6:	498b      	ldr	r1, [pc, #556]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b89      	ldr	r3, [pc, #548]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e105      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002828:	429a      	cmp	r2, r3
 800282a:	d908      	bls.n	800283e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b7e      	ldr	r3, [pc, #504]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	497b      	ldr	r1, [pc, #492]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d079      	beq.n	800293e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d11e      	bne.n	8002890 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	4b75      	ldr	r3, [pc, #468]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0dc      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002862:	f000 f9d1 	bl	8002c08 <RCC_GetSysClockFreqFromPLLSource>
 8002866:	4603      	mov	r3, r0
 8002868:	4a70      	ldr	r2, [pc, #448]	; (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d946      	bls.n	80028fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800286e:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d140      	bne.n	80028fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002882:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e035      	b.n	80028fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002898:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d115      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b9      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b0:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0ad      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0a5      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80028d0:	f000 f8b4 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d90f      	bls.n	80028fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f0:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028fc:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 0203 	bic.w	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4947      	ldr	r1, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290e:	f7fe f9ab 	bl	8000c68 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002914:	e00a      	b.n	800292c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002916:	f7fe f9a7 	bl	8000c68 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e077      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 020c 	and.w	r2, r3, #12
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	429a      	cmp	r2, r3
 800293c:	d1eb      	bne.n	8002916 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d105      	bne.n	8002950 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a37      	ldr	r2, [pc, #220]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800294a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800294e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002968:	429a      	cmp	r2, r3
 800296a:	d208      	bcs.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	492b      	ldr	r1, [pc, #172]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d210      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 020f 	bic.w	r2, r3, #15
 8002994:	4923      	ldr	r1, [pc, #140]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_ClockConfig+0x25c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e036      	b.n	8002a1c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4918      	ldr	r1, [pc, #96]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4910      	ldr	r1, [pc, #64]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ec:	f000 f826 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <HAL_RCC_ClockConfig+0x268>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_RCC_ClockConfig+0x26c>)
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f8d9 	bl	8000bc8 <HAL_InitTick>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40022000 	.word	0x40022000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	04c4b400 	.word	0x04c4b400
 8002a30:	08003774 	.word	0x08003774
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x34>
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d121      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d11e      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a70:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	e004      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ac2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d134      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d003      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ae0:	e005      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ae4:	617b      	str	r3, [r7, #20]
      break;
 8002ae6:	e005      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aea:	617b      	str	r3, [r7, #20]
      break;
 8002aec:	e002      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	617b      	str	r3, [r7, #20]
      break;
 8002af2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	fb03 f202 	mul.w	r2, r3, r2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	0e5b      	lsrs	r3, r3, #25
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	3301      	adds	r3, #1
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b34:	69bb      	ldr	r3, [r7, #24]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08003784 	.word	0x08003784
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	007a1200 	.word	0x007a1200

08002b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b6c:	f7ff f93e 	bl	8001dec <HAL_PWREx_GetVoltageRange>
 8002b70:	6178      	str	r0, [r7, #20]
 8002b72:	e014      	b.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b8c:	f7ff f92e 	bl	8001dec <HAL_PWREx_GetVoltageRange>
 8002b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba4:	d10b      	bne.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d913      	bls.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb0:	d902      	bls.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e00d      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e00a      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bc2:	d902      	bls.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	e004      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d101      	bne.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 020f 	bic.w	r2, r3, #15
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40022000 	.word	0x40022000

08002c08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d00b      	beq.n	8002c36 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d825      	bhi.n	8002c70 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d008      	beq.n	8002c3c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11f      	bne.n	8002c70 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c32:	613b      	str	r3, [r7, #16]
    break;
 8002c34:	e01f      	b.n	8002c76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c38:	613b      	str	r3, [r7, #16]
    break;
 8002c3a:	e01c      	b.n	8002c76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e005      	b.n	8002c64 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002c64:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	613b      	str	r3, [r7, #16]
    break;
 8002c6e:	e002      	b.n	8002c76 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
    break;
 8002c74:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	3301      	adds	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	fb03 f202 	mul.w	r2, r3, r2
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0e5b      	lsrs	r3, r3, #25
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002cb6:	683b      	ldr	r3, [r7, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	08003784 	.word	0x08003784

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d040      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d02a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d825      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002cfc:	2b60      	cmp	r3, #96	; 0x60
 8002cfe:	d026      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d821      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d006      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002d08:	2b40      	cmp	r3, #64	; 0x40
 8002d0a:	d81d      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d010      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002d14:	e018      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d16:	4b89      	ldr	r3, [pc, #548]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a88      	ldr	r2, [pc, #544]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d22:	e015      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fb02 	bl	8003334 <RCCEx_PLLSAI1_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3320      	adds	r3, #32
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fbed 	bl	800351c <RCCEx_PLLSAI2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	74fb      	strb	r3, [r7, #19]
      break;
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d56:	4b79      	ldr	r3, [pc, #484]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d64:	4975      	ldr	r1, [pc, #468]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002d6c:	e001      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d047      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d030      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8c:	d82a      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d92:	d02a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d98:	d824      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d81e      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002db0:	e018      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002db2:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbe:	e015      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fab4 	bl	8003334 <RCCEx_PLLSAI1_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dd0:	e00c      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3320      	adds	r3, #32
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fb9f 	bl	800351c <RCCEx_PLLSAI2_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002de2:	e003      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	74fb      	strb	r3, [r7, #19]
      break;
 8002de8:	e000      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002df2:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	494e      	ldr	r1, [pc, #312]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e08:	e001      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 809f 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e20:	4b46      	ldr	r3, [pc, #280]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	6593      	str	r3, [r2, #88]	; 0x58
 8002e42:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5e:	f7fd ff03 	bl	8000c68 <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e64:	e009      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fd feff 	bl	8000c68 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d902      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	74fb      	strb	r3, [r7, #19]
        break;
 8002e78:	e005      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ef      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d15b      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01f      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d019      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb6:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fd febe 	bl	8000c68 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eee:	e00b      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fd feba 	bl	8000c68 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d902      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	74fb      	strb	r3, [r7, #19]
            break;
 8002f06:	e006      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ec      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f34:	e008      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	74bb      	strb	r3, [r7, #18]
 8002f3a:	e005      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f48:	7c7b      	ldrb	r3, [r7, #17]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4ba0      	ldr	r3, [pc, #640]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a9f      	ldr	r2, [pc, #636]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f66:	4b9a      	ldr	r3, [pc, #616]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 0203 	bic.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	4996      	ldr	r1, [pc, #600]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f88:	4b91      	ldr	r3, [pc, #580]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 020c 	bic.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	498e      	ldr	r1, [pc, #568]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002faa:	4b89      	ldr	r3, [pc, #548]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	4985      	ldr	r1, [pc, #532]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fcc:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	497d      	ldr	r1, [pc, #500]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fee:	4b78      	ldr	r3, [pc, #480]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffc:	4974      	ldr	r1, [pc, #464]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	496c      	ldr	r1, [pc, #432]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003032:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003040:	4963      	ldr	r1, [pc, #396]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003054:	4b5e      	ldr	r3, [pc, #376]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003062:	495b      	ldr	r1, [pc, #364]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003076:	4b56      	ldr	r3, [pc, #344]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	4952      	ldr	r1, [pc, #328]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003098:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	494a      	ldr	r1, [pc, #296]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ba:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	4941      	ldr	r1, [pc, #260]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	4939      	ldr	r1, [pc, #228]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d028      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	4930      	ldr	r1, [pc, #192]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311c:	d106      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800311e:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003128:	60d3      	str	r3, [r2, #12]
 800312a:	e011      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f8f9 	bl	8003334 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d04d      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003164:	d108      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003172:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003176:	e012      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003184:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003196:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	e020      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031be:	d109      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a02      	ldr	r2, [pc, #8]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ca:	60d3      	str	r3, [r2, #12]
 80031cc:	e014      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 f8a5 	bl	8003334 <RCCEx_PLLSAI1_Config>
 80031ea:	4603      	mov	r3, r0
 80031ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d028      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003204:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003212:	4947      	ldr	r1, [pc, #284]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003222:	d106      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a41      	ldr	r2, [pc, #260]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322e:	60d3      	str	r3, [r2, #12]
 8003230:	e011      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800323a:	d10c      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f876 	bl	8003334 <RCCEx_PLLSAI1_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	492f      	ldr	r1, [pc, #188]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f851 	bl	8003334 <RCCEx_PLLSAI1_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b2:	f023 0204 	bic.w	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032bc:	491c      	ldr	r1, [pc, #112]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d6:	f023 0218 	bic.w	r2, r3, #24
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	4913      	ldr	r1, [pc, #76]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	490a      	ldr	r1, [pc, #40]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003322:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003324:	7cbb      	ldrb	r3, [r7, #18]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003342:	4b72      	ldr	r3, [pc, #456]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00e      	beq.n	800336c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800334e:	4b6f      	ldr	r3, [pc, #444]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d103      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
       ||
 8003362:	2b00      	cmp	r3, #0
 8003364:	d142      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	e03f      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d018      	beq.n	80033a6 <RCCEx_PLLSAI1_Config+0x72>
 8003374:	2b03      	cmp	r3, #3
 8003376:	d825      	bhi.n	80033c4 <RCCEx_PLLSAI1_Config+0x90>
 8003378:	2b01      	cmp	r3, #1
 800337a:	d002      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0x4e>
 800337c:	2b02      	cmp	r3, #2
 800337e:	d009      	beq.n	8003394 <RCCEx_PLLSAI1_Config+0x60>
 8003380:	e020      	b.n	80033c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003382:	4b62      	ldr	r3, [pc, #392]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11d      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e01a      	b.n	80033ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003394:	4b5d      	ldr	r3, [pc, #372]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d116      	bne.n	80033ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a4:	e013      	b.n	80033ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033a6:	4b59      	ldr	r3, [pc, #356]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033b2:	4b56      	ldr	r3, [pc, #344]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033c2:	e006      	b.n	80033d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e004      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80033d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80033da:	4b4c      	ldr	r3, [pc, #304]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4949      	ldr	r1, [pc, #292]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 8086 	bne.w	8003500 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033f4:	4b45      	ldr	r3, [pc, #276]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a44      	ldr	r2, [pc, #272]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003400:	f7fd fc32 	bl	8000c68 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003406:	e009      	b.n	800341c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003408:	f7fd fc2e 	bl	8000c68 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d902      	bls.n	800341c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	73fb      	strb	r3, [r7, #15]
        break;
 800341a:	e005      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ef      	bne.n	8003408 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d168      	bne.n	8003500 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d113      	bne.n	800345c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003434:	4b35      	ldr	r3, [pc, #212]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <RCCEx_PLLSAI1_Config+0x1dc>)
 800343a:	4013      	ands	r3, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6892      	ldr	r2, [r2, #8]
 8003440:	0211      	lsls	r1, r2, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	06d2      	lsls	r2, r2, #27
 8003448:	4311      	orrs	r1, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6852      	ldr	r2, [r2, #4]
 800344e:	3a01      	subs	r2, #1
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	430a      	orrs	r2, r1
 8003454:	492d      	ldr	r1, [pc, #180]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	610b      	str	r3, [r1, #16]
 800345a:	e02d      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d115      	bne.n	800348e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	0211      	lsls	r1, r2, #8
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6912      	ldr	r2, [r2, #16]
 8003474:	0852      	lsrs	r2, r2, #1
 8003476:	3a01      	subs	r2, #1
 8003478:	0552      	lsls	r2, r2, #21
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6852      	ldr	r2, [r2, #4]
 8003480:	3a01      	subs	r2, #1
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	430a      	orrs	r2, r1
 8003486:	4921      	ldr	r1, [pc, #132]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003488:	4313      	orrs	r3, r2
 800348a:	610b      	str	r3, [r1, #16]
 800348c:	e014      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6892      	ldr	r2, [r2, #8]
 800349a:	0211      	lsls	r1, r2, #8
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6952      	ldr	r2, [r2, #20]
 80034a0:	0852      	lsrs	r2, r2, #1
 80034a2:	3a01      	subs	r2, #1
 80034a4:	0652      	lsls	r2, r2, #25
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6852      	ldr	r2, [r2, #4]
 80034ac:	3a01      	subs	r2, #1
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	430a      	orrs	r2, r1
 80034b2:	4916      	ldr	r1, [pc, #88]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a13      	ldr	r2, [pc, #76]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd fbd0 	bl	8000c68 <HAL_GetTick>
 80034c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ca:	e009      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034cc:	f7fd fbcc 	bl	8000c68 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d902      	bls.n	80034e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	73fb      	strb	r3, [r7, #15]
          break;
 80034de:	e005      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ef      	beq.n	80034cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	4904      	ldr	r1, [pc, #16]	; (800350c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	07ff800f 	.word	0x07ff800f
 8003514:	ff9f800f 	.word	0xff9f800f
 8003518:	f9ff800f 	.word	0xf9ff800f

0800351c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352a:	4b72      	ldr	r3, [pc, #456]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003536:	4b6f      	ldr	r3, [pc, #444]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0203 	and.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d103      	bne.n	800354e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
       ||
 800354a:	2b00      	cmp	r3, #0
 800354c:	d142      	bne.n	80035d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e03f      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d018      	beq.n	800358e <RCCEx_PLLSAI2_Config+0x72>
 800355c:	2b03      	cmp	r3, #3
 800355e:	d825      	bhi.n	80035ac <RCCEx_PLLSAI2_Config+0x90>
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <RCCEx_PLLSAI2_Config+0x4e>
 8003564:	2b02      	cmp	r3, #2
 8003566:	d009      	beq.n	800357c <RCCEx_PLLSAI2_Config+0x60>
 8003568:	e020      	b.n	80035ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800356a:	4b62      	ldr	r3, [pc, #392]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d11d      	bne.n	80035b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800357a:	e01a      	b.n	80035b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800357c:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d116      	bne.n	80035b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358c:	e013      	b.n	80035b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800358e:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800359a:	4b56      	ldr	r3, [pc, #344]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035aa:	e006      	b.n	80035ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	e004      	b.n	80035bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035b2:	bf00      	nop
 80035b4:	e002      	b.n	80035bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80035ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80035c2:	4b4c      	ldr	r3, [pc, #304]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4949      	ldr	r1, [pc, #292]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 8086 	bne.w	80036e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035dc:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a44      	ldr	r2, [pc, #272]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fd fb3e 	bl	8000c68 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035f0:	f7fd fb3a 	bl	8000c68 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
        break;
 8003602:	e005      	b.n	8003610 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ef      	bne.n	80035f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d168      	bne.n	80036e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d113      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6892      	ldr	r2, [r2, #8]
 8003628:	0211      	lsls	r1, r2, #8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68d2      	ldr	r2, [r2, #12]
 800362e:	06d2      	lsls	r2, r2, #27
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6852      	ldr	r2, [r2, #4]
 8003636:	3a01      	subs	r2, #1
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	430a      	orrs	r2, r1
 800363c:	492d      	ldr	r1, [pc, #180]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	614b      	str	r3, [r1, #20]
 8003642:	e02d      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d115      	bne.n	8003676 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6892      	ldr	r2, [r2, #8]
 8003656:	0211      	lsls	r1, r2, #8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6912      	ldr	r2, [r2, #16]
 800365c:	0852      	lsrs	r2, r2, #1
 800365e:	3a01      	subs	r2, #1
 8003660:	0552      	lsls	r2, r2, #21
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	3a01      	subs	r2, #1
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	430a      	orrs	r2, r1
 800366e:	4921      	ldr	r1, [pc, #132]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	614b      	str	r3, [r1, #20]
 8003674:	e014      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <RCCEx_PLLSAI2_Config+0x1e4>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	0211      	lsls	r1, r2, #8
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6952      	ldr	r2, [r2, #20]
 8003688:	0852      	lsrs	r2, r2, #1
 800368a:	3a01      	subs	r2, #1
 800368c:	0652      	lsls	r2, r2, #25
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6852      	ldr	r2, [r2, #4]
 8003694:	3a01      	subs	r2, #1
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	430a      	orrs	r2, r1
 800369a:	4916      	ldr	r1, [pc, #88]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fd fadc 	bl	8000c68 <HAL_GetTick>
 80036b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036b2:	e009      	b.n	80036c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036b4:	f7fd fad8 	bl	8000c68 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d902      	bls.n	80036c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	73fb      	strb	r3, [r7, #15]
          break;
 80036c6:	e005      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ef      	beq.n	80036b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	4904      	ldr	r1, [pc, #16]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	07ff800f 	.word	0x07ff800f
 80036fc:	ff9f800f 	.word	0xff9f800f
 8003700:	f9ff800f 	.word	0xf9ff800f

08003704 <memset>:
 8003704:	4402      	add	r2, r0
 8003706:	4603      	mov	r3, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <__libc_init_array>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	4d0d      	ldr	r5, [pc, #52]	; (800374c <__libc_init_array+0x38>)
 8003718:	4c0d      	ldr	r4, [pc, #52]	; (8003750 <__libc_init_array+0x3c>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	2600      	movs	r6, #0
 8003720:	42a6      	cmp	r6, r4
 8003722:	d109      	bne.n	8003738 <__libc_init_array+0x24>
 8003724:	4d0b      	ldr	r5, [pc, #44]	; (8003754 <__libc_init_array+0x40>)
 8003726:	4c0c      	ldr	r4, [pc, #48]	; (8003758 <__libc_init_array+0x44>)
 8003728:	f000 f818 	bl	800375c <_init>
 800372c:	1b64      	subs	r4, r4, r5
 800372e:	10a4      	asrs	r4, r4, #2
 8003730:	2600      	movs	r6, #0
 8003732:	42a6      	cmp	r6, r4
 8003734:	d105      	bne.n	8003742 <__libc_init_array+0x2e>
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	f855 3b04 	ldr.w	r3, [r5], #4
 800373c:	4798      	blx	r3
 800373e:	3601      	adds	r6, #1
 8003740:	e7ee      	b.n	8003720 <__libc_init_array+0xc>
 8003742:	f855 3b04 	ldr.w	r3, [r5], #4
 8003746:	4798      	blx	r3
 8003748:	3601      	adds	r6, #1
 800374a:	e7f2      	b.n	8003732 <__libc_init_array+0x1e>
 800374c:	080037b4 	.word	0x080037b4
 8003750:	080037b4 	.word	0x080037b4
 8003754:	080037b4 	.word	0x080037b4
 8003758:	080037b8 	.word	0x080037b8

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
